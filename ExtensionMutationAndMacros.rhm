#lang shplait
macro 'test_returns $fn:
         ($arg, ...): $ret
         ...':
            'block:
               check: $fn($arg, ...)
                      ~is $ret
               ...'

macro 'test_errors $fn:
         ($args, ...): $value
         ...':
      'begin:
        check: $fn($args, ...)
               ~raises $value
        ...'

test_returns add1:
  (0): 1
  (1): 2
  (2): 3
       
fun f(x):
  cond
  | x < 0: error(#'neg, "negative")
  | x == 0: error(#'zero, "zero")
  | x > 0: error(#'pos, "positive")

test_errors f:
  (-1): "negative"
  (0): "zero"
  (1): "positive"


type Location = Int

type Value
| intV(n :: Int)
| closV(arg :: Symbol,
        body :: Exp,
        env :: Env)

fun valToExp(val :: Value):
  match val
  | intV(n): intE(n)
  | closV(a, b, e): funE(a, b)

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp,
        r :: Exp)
| multE(l :: Exp,
        r :: Exp)
| letE(n :: Symbol,
       rhs :: Exp,
       body :: Exp)
| funE(n :: Symbol,
       body :: Exp)
| appE(fn :: Exp,
       arg :: Exp)
| beginE(l :: Exp,
         r :: Exp)
| setE(var :: Symbol,
       val :: Exp)
| swapE(l :: Symbol,
        r :: Symbol)

type Binding
| bind(name :: Symbol,
       location :: Location)

type Env = Listof(Binding)

def mt_env = []
def extend_env = cons

type Storage
| cell(location :: Location,
       val :: Value)

type Store = Listof(Storage)
def mt_store = []
def override_store = cons

type Result
| res(v :: Value,
      s :: Store)

// parse ----------------------------------------
fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | 'let $name = $rhs:
           $body':
          letE(syntax_to_symbol(name),
               parse(rhs),
               parse(body))
      | '$l <> $r':
          swapE(syntax_to_symbol(l),
                syntax_to_symbol(r))
      | '$name := $val':
          setE(syntax_to_symbol(name),
               parse(val))
      | '$left + $right':
          plusE(parse(left),
                parse(right))
      | '$left * $right':
          multE(parse(left),
                parse(right))
      | 'fun ($id): $body':
          funE(syntax_to_symbol(id),
               parse(body))
      | '$fn($arg)':
          appE(parse(fn),
               parse(arg))
      | 'begin:
           $effect_exp
           $result_exp':
          beginE(parse(effect_exp), parse(result_exp))
      | '($e)':
          parse(e)
      | ~else:
          error(#'parse, "invalid input: " +& s)

module test:
  check: parse('2')
         ~is intE(2)
  check: parse('x')
         ~is idE(#'x)
  check: parse('2 + 1')
         ~is plusE(intE(2), intE (1))
  check: parse('3 * 4')
         ~is multE(intE(3), intE(4))
  check: parse('3 * 4 + 8')
         ~is plusE(multE(intE(3), intE(4)),
                   intE(8))
  check: parse('fun (x): 9')
         ~is funE(#'x, intE(9))
  check: parse('double(9)')
         ~is appE(idE(#'double), intE(9))
  check: parse('1 + double(9)')
         ~is plusE(intE(1),
                   appE(idE(#'double), intE(9)))
  check: parse('3 * (4 + 8)')
         ~is multE(intE(3),
                   plusE(intE(4), intE(8)))
  check: parse('let x = 1 + 2:
                  y')
         ~is letE(#'x,
                  plusE(intE(1), intE(2)),
                  idE(#'y))
  check: parse('begin:
                  1
                  2')
         ~is beginE(intE(1), intE(2))

  check: parse('1 2')
         ~raises "invalid input"

// reslet form ----------------------------------------
macro 'reslet ($v_id, $sto_id) = $call:
         $body':
  'match $call
   | res($v_id, $sto_id):
       $body'
  
// interp ----------------------------------------
fun interp(a :: Exp, env :: Env, sto :: Store) :: Result:
  match a
  | intE(n): res(intV(n), sto)
  | idE(s): res(fetch(lookup(s, env), sto),
                sto)
  | plusE(l, r): reslet (v_l, sto_l) = interp(l, env, sto):
                   reslet (v_r, sto_r) = interp(r, env, sto_l):
                     res(num_plus(v_l, v_r), sto_r)
  | multE(l, r): reslet (v_l, sto_l) = interp(l, env, sto):
                   reslet (v_r, sto_r) = interp(r, env, sto_l):
                     res(num_mult(v_l, v_r), sto_r)
  | letE(n, rhs, body):
      reslet (v_rhs, sto_rhs) = interp(rhs, env, sto):
        let l = new_loc(sto_rhs):
          interp(body,
                 extend_env(bind(n, l),
                            env),
                 override_store(cell(l, v_rhs),
                                sto_rhs))
  | funE(n, body): res(closV(n, body, env), sto)
  | appE(fn, arg):
      reslet (v_f, sto_f) = interp(fn, env, sto):
        reslet (v_a, sto_a) = interp(arg, env, sto_f):
          match v_f
          | closV(n, body, c_env):
              let l = new_loc(sto_a):
                interp(body,
                       extend_env(bind(n, l),
                                  c_env),
                       override_store(cell(l, v_a),
                                      sto_a))
          | ~else: error(#'interp, "not a function")
  | beginE(l, r):
      reslet (v_l, sto_l) = interp(l, env, sto):
        interp(r, env, sto_l)
  | setE(var, val):
      let l = lookup(var, env):
        reslet (v_v, sto_v) = interp(val, env, sto):
          res(v_v,
              override_store(cell(l, v_v),
                             sto_v))
  | swapE(l, r):
      def left = valToExp(fetch(lookup(l, env), sto))
      def right = valToExp(fetch(lookup(r, env), sto))
      def firstReplacement = interp(setE(r, left), env, sto)
      interp(setE(l, right), env, res.s(firstReplacement))

module test:
  fun run(s :: Syntax):: Int:
    intV.n(res.v(interp(parse(s), [], [])))
  check: run('let a = (fun (x): 1):
                  let b = (fun (y): 2):
                      (a <> b)(124124)
                      ')
         ~is 2
  check: run('let x = 1:
                let y = 2: 
                  begin:
                    x <> y
                    x')
         ~is 2
  check: run('let x = 1:
                let y = 2:
                  x <> y
              ')
         ~is 2
  check: run('let x = 1:
                let y = 2: 
                  begin:
                    x := y + 3
                    x')
         ~is 5
  check: interp(parse('2'), mt_env, mt_store)
         ~is res(intV(2), mt_store)
  check: interp(parse('x'), mt_env, mt_store)
         ~raises "free variable"

  check: interp(parse('2 + 1'), mt_env, mt_store)
         ~is res(intV(3), mt_store)
  check: interp(parse('2 * 1'), mt_env, mt_store)
         ~is res(intV(2), mt_store)
  check: interp(parse('(2 * 3) + (5 + 8)'), mt_env, mt_store)
         ~is res(intV(19), mt_store)
  check: interp(parse('fun (x): x + x'),
                mt_env,
                mt_store)
         ~is res(closV(#'x, plusE(idE(#'x), idE(#'x)), mt_env),
                 mt_store)
  check: run('let x = 5: x + x')
         ~is 10
  check: run('let x = 5:
                         let x = x + 1:
                           x + x')
         ~is 12
  check: run('let x = 5:
                         let y = 6:
                           x')
         ~is 5
  check: run('(fun (x): x + x)(8)')
         ~is 16

  check: interp(parse('1(2)'), mt_env, mt_store)
         ~raises "not a function"
  check: interp(parse('1 + (fun (x): x)'), mt_env, mt_store)
         ~raises "not a number"
  check: interp(parse('let bad = (fun (x): x + y):
                         let y = 5:
                           bad(2)'),
                mt_env,
                mt_store)
         ~raises "free variable"

// num_plus and num_mult ----------------------------------------
fun num_op(op :: (Int, Int) -> Int, l :: Value, r :: Value) :: Value:
  cond
  | l is_a intV && r is_a intV:
      intV(op(intV.n(l), intV.n(r)))
  | ~else:
      error(#'interp, "not a number")
fun num_plus(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a+b, l, r)
fun num_mult(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a*b, l, r)

module test:
  check: num_plus(intV(1), intV(2))
         ~is intV(3)
  check: num_mult(intV(3), intV(2))
         ~is intV(6)
  
// lookup ----------------------------------------
fun lookup(n :: Symbol, env :: Env) :: Location:
  match env
  | []: error(#'lookup, "free variable: " +& n)
  | cons(b, rst_env):
      cond
      | n == bind.name(b):
          bind.location(b)
      | ~else:
          lookup(n, rst_env)

module test:
  check: lookup(#'x, mt_env)
         ~raises "free variable"

// store operations ----------------------------------------

fun new_loc(sto :: Store) :: Location:
  1 + max_address(sto)

fun max_address(sto :: Store) :: Location:
  match sto
  | []: 0
  | cons(c, rst_sto): max(cell.location(c),
                          max_address(rst_sto))

fun fetch(l :: Location, sto :: Store) :: Value:
  match sto
  | []: error(#'interp, "unallocated location")
  | cons(c, rst_sto): if l == cell.location(c)
                      | cell.val(c)
                      | fetch(l, rst_sto)
check: fetch(1, [])
       ~raises "unallocated location"

module test:
  check: new_loc(mt_store)
         ~is 1
       
  check: max_address(mt_store)
         ~is 0
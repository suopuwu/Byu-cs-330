#lang shplait

def funs = []

// #// to comment out a block

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp,
        r :: Exp)
| multE(l :: Exp,
        r :: Exp)

| appE(fn :: Exp,
       arg :: Exp)
| letE(n :: Symbol,
       rhs :: Exp,
       body :: Exp)
| funE(n :: Symbol,
       body :: Exp)

type Binding
| bind(name :: Symbol,
       val :: Value)

type Env = Listof(Binding)

type Value
| intV(n :: Int)
| closV(arg :: Symbol,
        body :: Exp,
        env :: Env)

def extend_env = cons

fun lookup(n :: Symbol, env :: Env) :: Value:
  match env
  | []: error(#'lookup, "free variable")
  | cons(b, rst_env): cond
                      | n == bind.name(b):
                          bind.val(b)
                      | ~else: lookup(n, rst_env)

fun interp(a :: Exp, env :: Env) :: Value:
  match a
  | intE(n): intV(n)
  | idE(s): lookup(s, env)
  | plusE(l, r): num_plus(interp(l, env), interp(r, env))
  | multE(l, r): num_mult(interp(l, env), interp(r, env))
  | letE(n, rhs, body): interp(body,
                               extend_env(bind(n, interp(rhs, env)), env))
  | funE(n, body): closV(n, body, env)
  | appE(fn, arg):
      match interp(fn, env)
      | closV(n, body, c_env):
          interp(body,
                 extend_env(bind(n, interp(arg, env)),
                            c_env))
      | ~else: error(#'interp, "not a function")

fun are_nums(a :: Value, b :: Value):: Boolean:
  a is_a intV && b is_a intV

fun num_op(l, r, op):: Value:
  if are_nums(l, r)
  | intV(op(intV.n(l), intV.n(r)))
  | error(#'interp, "TODO: not a number")

fun num_plus(l :: Value, r :: Value):: Value:
  num_op(l, r, fun (ln, rn): ln + rn)
    
fun num_mult(l :: Value, r :: Value):: Value:
  num_op(l, r, fun (ln, rn): ln * rn)

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | 'let $name = $rhs:
           $body':
          letE(syntax_to_symbol(name),
               parse(rhs),
               parse(body))
      | '$left + $right':
          plusE(parse(left), parse(right))
      | '$left * $right':
          multE(parse(left), parse(right))
      | 'fun ($id): $body':
          funE(syntax_to_symbol(id),
               parse(body))
      | '$fn($arg)':
          appE(parse(fn),
               parse(arg))
      | '($e)':
          parse(e)
      | ~else:
          error(#'parse, "invalid input: " +& s)


//TESTS
def mt_env = []

module test:
  //lambda
  check: num_plus(intV(0), closV(#'symbol, intE(0), []))
         ~raises "not a number"
  check: interp(parse(' (fun (x): x+1)(10)'), [])
         ~is intV(11)
  check: parse(' (fun (x): x+1)(10)')
         ~is appE (funE(#'x, plusE(idE(#'x), intE(1))),
                   intE(10))
  check: parse('fun(x): x + 1')
         ~is funE(#'x, plusE(idE(#'x), intE(1)))
         
  //older


  check: lookup (#'x, mt_env)
         ~raises "free variable"
  check: lookup(#'x, extend_env(bind(#'x, intV(1)), mt_env) )
         ~is intV(1)
  check: lookup(#'x, extend_env (bind(#'y, intV(1)),
                                 extend_env (bind(#'x, intV(2)), mt_env)))
         ~is intV(2)
  check: interp(parse('sdl'), mt_env)
         ~raises "free variable"
  check: interp(parse('let test = 3:
                         test + 1'), [])
         ~is intV(4)
  check: interp(parse('let test = 2:
                         test * 100'), [])
         ~is intV(200)
  check: interp(parse('let test = 2:
                         let test2 = 4:
                           test * test2'), [])
         ~is intV(8)
  check: interp(parse('let test = 3:
                         test(3)'), [])
         ~raises "not a function"
         
  check: parse('x')
         ~is idE(#'x) 
  check: parse('2')
         ~is intE(2)
  check: parse('1 + 2')
         ~is plusE(intE(1), intE(2))
  check: parse('3 * 4')
         ~is multE(intE(3), intE(4))
  check: parse('1 + 3 * 4')
         ~is plusE(intE(1), multE(intE(3), intE(4)))
  check: parse('(1 + 3) * 4')
         ~is multE(plusE(intE(1), intE(3)), intE(4))
  check: parse('1 2')
         ~raises "invalid input"
  check: interp(intE(4), mt_env)
         ~is intV(4)
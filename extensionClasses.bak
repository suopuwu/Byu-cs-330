#lang shplait

type Exp
| intE(n :: Int)
| plusE(lhs :: Exp,
        rhs :: Exp)
| multE(lhs :: Exp,
        rhs :: Exp)
| argE()
| thisE()
| newE(class_name :: Symbol,
       args :: Listof(Exp))
| getE(obj_exp :: Exp,
       field_name :: Symbol)
| sendE(obj_exp :: Exp,
        method_name :: Symbol,
        arg_exp :: Exp)
| ssendE(obj_exp :: Exp,
         class_name :: Symbol,
         method_name :: Symbol,
         arg_exp :: Exp)

type Class
| classC(field_names :: Listof(Symbol),
         methods :: Listof(Symbol * Exp))

type Value
| intV(n :: Int)
| objV(class_name :: Symbol,
       fields :: Listof(Value))

// ----------------------------------------

fun find(l :: Listof(Symbol * ?a), name :: Symbol) :: ?a:
  match l
  | []:
      error(#'find, "not found: " +& name)
  | cons(p, rst_l):
      if fst(p) == name
      | snd(p)
      | find(rst_l, name)

module test:
  check: find([values(#'a, 1)], #'a)
         ~is 1
  check: find([values(#'a, "apple")], #'a)
         ~is "apple"
  check: find([values(#'a, 1), values(#'b, 2)], #'b)
         ~is 2
  check: find([], #'a)
         ~raises "not found: a"
  check: find([values(#'a, 1)], #'x)
         ~raises "not found: x"

// ----------------------------------------

fun interp(a::Exp, classes::Listof(Symbol * Class), this_val::Value, arg_val::Value) :: Value :
  fun recur(exp):
    interp(exp, classes, this_val, arg_val)
  match a
  | intE(n): intV(n)
  | plusE(l, r): num_plus(recur(l), recur(r))
  | multE(l, r): num_mult(recur(l), recur(r))
  | thisE(): this_val
  | argE(): arg_val
  | newE(class_name, field_exps):
      ....
  | getE(obj_exp, field_name):
      ....
  | sendE(obj_exp, method_name, arg_exp):
      ....
  | ssendE(obj_exp, class_name, method_name, arg_exp):
      ....
                    
fun num_op(op :: (Int, Int) -> Int, l :: Value, r :: Value) :: Value:
  cond
  | l is_a intV && r is_a intV:
      intV(op(intV.n(l), intV.n(r)))
  | ~else:
      error(#'interp, "not a number")
fun num_plus(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a+b, l, r)
fun num_mult(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a*b, l, r)

// ----------------------------------------
// Examples

fun parse_exp(e):
  cond
  | syntax_is_integer(e): intE(syntax_to_integer(e))
  | syntax_is_symbol(e): 
      def sym = syntax_to_symbol(e)
      if sym == #'arg 
      | argE()
      | if sym == #'this
        | thisE()
        | error(#'parse, "unsupported symbol: " +& sym)
  | ~else: 
      match e
      | '$lhs + $rhs': plusE(parse_exp(lhs), parse_exp(rhs))
      | '$lhs * $rhs': multE(parse_exp(lhs), parse_exp(rhs))
      | '($exp :: $clazz) . $method ($arg)': ssendE(parse_exp(exp), syntax_to_symbol(clazz), syntax_to_symbol(method), parse_exp(arg))
      | '$exp . $method($arg)': sendE(parse_exp(exp), syntax_to_symbol(method), parse_exp(arg))
      | '$exp . $field': getE(parse_exp(exp), syntax_to_symbol(field))
      | 'new $sym($arg, ...)': newE(syntax_to_symbol(sym), map(parse_exp, syntax_to_list('[$arg, ...]')))
      | ~else: error(#'parse, "unsupported syntax: " +& e)

fun parse_class(c):
  match c
  | 'class $sym($fields, ...):
       $methods
       ...': values(syntax_to_symbol(sym), 
                    classC(map(syntax_to_symbol, syntax_to_list('[$fields, ...]')), 
                           map(parse_method, syntax_to_list('[$methods, ...]'))))

fun parse_method(s):
  match s
  | 'method $sym(arg):
       $body':
       values(syntax_to_symbol(sym), parse_exp(body))

module test:
  def posn_class:
    values(
      #'Posn,
      classC([#'x,#'y],
             [
               values(#'mdist,
                      plusE(getE(thisE(), #'x), getE(thisE(), #'y))),
               values(#'addDist,
                      plusE(sendE(thisE(), #'mdist, intE(0)),
                            sendE(argE(), #'mdist, intE(0)))),
               values(#'addX,
                      plusE(getE(thisE(), #'x), argE())),
               values(#'multY,
                      multE(argE(), getE(thisE(), #'y))),
               values(#'factory12,
                      newE(#'Posn, [intE(1), intE(2)]))
             ])
      )
  check: parse_class('class Posn(x, y):
                        method mdist(arg):
                          this.x + this.y
                        method addDist(arg):
                          this.mdist(0) + arg.mdist(0)
                        method addX(arg):
                          this.x + arg
                        method multY(arg):
                          arg * this.y
                        method factory12(arg):
                          new Posn(1, 2)')
         ~is posn_class

  def posn3D_class:
    values(
      #'Posn3D,
      classC([#'x,#'y, #'z],
             [
               values(#'mdist,
                      plusE(getE(thisE(), #'z),
                            ssendE(thisE(), #'Posn, #'mdist, argE()))),
               values(#'addDist,
                      ssendE(thisE(), #'Posn, #'addDist, argE()))
             ])
    )

  def posn27 = newE(#'Posn, [intE(2), intE(7)])
  def posn531 = newE(#'Posn3D, [intE(5), intE(3), intE(1)])
  fun interp_posn(a):
    interp(a, [posn_class, posn3D_class], intV(-1), intV(-1))

// ----------------------------------------

module test:
  check: interp(intE(10),
                [], objV(#'Object, []), intV(0))
         ~is intV(10)
  check: interp(plusE(intE(10), intE(17)),
                [], objV(#'Object, []), intV(0))
         ~is intV(27)
  check: interp(multE(intE(10), intE(7)),
                [], objV(#'Object, []), intV(0))
         ~is intV(70)
  check: interp_posn(newE(#'Posn, [intE(2), intE(7)]))
         ~is objV(#'Posn, [intV(2), intV(7)])
  
  check: interp_posn(sendE(posn27, #'mdist, intE(0)))
         ~is intV(9)
  
  check: interp_posn(sendE(posn27, #'addX, intE(10)))
         ~is intV(12)

  check: interp_posn(sendE(ssendE(posn27, #'Posn, #'factory12, intE(0)),
                           #'multY,
                           intE(15)))
         ~is intV(30)
  check: interp_posn(sendE(posn531, #'addDist, posn27))
         ~is intV(18)
  
  check: interp_posn(plusE(intE(1), posn27))
         ~raises "not a number"
  check: interp_posn(getE(intE(1), #'x))
         ~raises "not an object"
  check: interp_posn(sendE(intE(1), #'mdist, intE(0)))
         ~raises "not an object"
  check: interp_posn(newE(#'Posn, [intE(0)]))
         ~raises "wrong field count"
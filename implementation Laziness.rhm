#lang shplait

macro 'test_returns $fn:
         ($arg, ...): $ret
         ...':
            'block:
               check: $fn($arg, ...)
                      ~is $ret
               ...'

macro 'test_errors $fn:
         ($args, ...): $value
         ...':
      'begin:
        check: $fn($args, ...)
               ~raises $value
        ...'

type Value
| intV(n :: Int)
| closV(arg :: Symbol,
        body :: Exp,
        env :: Env)

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp,
        r :: Exp)
| multE(l :: Exp,
        r :: Exp)
| funE(n :: Symbol,
       body :: Exp)
| appE(fn :: Exp,
       arg :: Exp)

type Binding
| bind(name :: Symbol,
       val :: Thunk)

type Thunk
| delay(arg :: Exp,
        env :: Env,
        done :: Boxof(Optionof(Value)))

type Env = Listof(Binding)

def mt_env = []
def extend_env = cons

fun force(t :: Thunk) :: Value:
  match t
  | delay(arg, env, d):
      match unbox(d)
      | none():
          let v = interp(arg, env):
            set_box(d, some(v))
            v
      | some(v): v

// parse ----------------------------------------
fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | 'let $name = $rhs:
           $body':
          appE(funE(syntax_to_symbol(name),
                    parse(body)),
               parse(rhs))    
      | '$left + $right':
          plusE(parse(left),
                parse(right))
      | '$left * $right':
          multE(parse(left),
                parse(right))
      | 'fun ($id): $body':
          funE(syntax_to_symbol(id),
               parse(body))
      | '$fn($arg)':
          appE(parse(fn),
               parse(arg))
      | '($e)':
          parse(e)
      | ~else:
          error(#'parse, "invalid input: " +& s)

module test:
  test_returns parse:
    ('2'): intE(2)
    ('x'): idE(#'x)
    ('2 + 1'): plusE(intE(2), intE(1))
    ('3 * 4'): multE(intE(3), intE(4))
    ('3 * 4 + 8'): plusE(multE(intE(3), intE(4)), intE(8))
    ('fun (x): 9'): funE(#'x, intE(9))
    ('double(9)'): appE(idE(#'double), intE(9))
    ('1 + double(9)'): plusE(intE(1), appE(idE(#'double), intE(9)))
    ('3 * (4 + 8)'): multE(intE(3), plusE(intE(4), intE(8)))
    ('let x = 1 + 2: y'): appE(funE(#'x, idE(#'y)), plusE(intE(1), intE(2)))
  check: parse('1 2')
         ~raises "invalid input"
      
// interp ----------------------------------------
fun interp(a :: Exp, env :: Env) :: Value:
  match a
  | intE(n): intV(n)
  | idE(s): force(lookup(s, env))
  | plusE(l, r): num_plus(interp(l, env), interp(r, env))
  | multE(l, r): num_mult(interp(l, env), interp(r, env))
  | funE(n, body): closV(n, body, env)
  | appE(fn, arg):
      match interp(fn, env)
      | closV(n, body, c_env):
          interp(body,
                 extend_env(bind(n, delay(arg, env, box(none()))),
                            c_env))
      | ~else: error(#'interp, "not a function")

module test:
  test_returns interp:
    (parse('2'), mt_env): intV(2)
    (parse('2 + 1'), mt_env): intV(3)
    (parse('2 * 1'), mt_env): intV(2)
    (parse('(2 * 3) + (5 + 8)'), mt_env): intV(19)
    (parse('fun (x): x + x'), mt_env): closV(#'x, plusE(idE(#'x), idE(#'x)), mt_env)
    (parse('let x = 5: x + x'), mt_env): intV(10)
    (parse('let x = 5: let x = x + 1: x + x'), mt_env): intV(12)
    (parse('let x = 5: let y = 6: x'), mt_env): intV(5)
    (parse('(fun (x): x + x)(8)'), mt_env): intV(16)
  
  test_errors interp:
    (parse('x'), mt_env): "free variable"
    (parse('1(2)'), mt_env): "not a function"
    (parse('1 + (fun (x): x)'), mt_env): "not a number"
    (parse('let bad = (fun (x): x + y):
                         let y = 5:
                           bad(2)'),
     mt_env): "free variable"

               
// num_plus and num_mult ----------------------------------------
fun num_op(op :: (Int, Int) -> Int, l :: Value, r :: Value) :: Value:
  cond
  | l is_a intV && r is_a intV:
      intV(op(intV.n(l), intV.n(r)))
  | ~else:
      error(#'interp, "not a number")
fun num_plus(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a+b, l, r)
fun num_mult(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a*b, l, r)

module test:
  check: num_plus(intV(1), intV(2))
         ~is intV(3)
  check: num_mult(intV(3), intV(2))
         ~is intV(6)
  
// lookup ----------------------------------------
fun lookup(n :: Symbol, env :: Env) :: Thunk:
  match env
  | []: error(#'lookup, "free variable")
  | cons(b, rst_env):
      cond
      | n == bind.name(b):
          bind.val(b)
      | ~else:
          lookup(n, rst_env)

module test:
  check: lookup(#'x, mt_env)
         ~raises "free variable"

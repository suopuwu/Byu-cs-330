#lang shplait
//In discord, we were told that we could remove letE. I did that.
fun type_error(a, msg):
  error(#'typecheck, "no type: " +& a +& " not a " +& msg)

type Value
| intV(n :: Int)
| closV(arg :: Symbol,
        body :: Exp,
        env :: Env)

type Type
| intT()
| boolT()
| arrowT(arg :: Type,
         result :: Type)

type TypeBinding
| tbind(name :: Symbol,
        t :: Type)

type TypeEnv = Listof(TypeBinding)

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp,
        r :: Exp)
| multE(l :: Exp,
        r :: Exp)
| funE(n :: Symbol,
       arg_type :: Type,
       body :: Exp)
| appE(fn :: Exp,
       arg :: Exp)

type Binding
| bind(name :: Symbol,
       val :: Value)

type Env = Listof(Binding)

def mt_env = []
def extend_env = cons

fun typecheck(a :: Exp, tenv :: TypeEnv) :: Type:
  match a
  | intE(n): intT()
  | multE(l, r):
      match typecheck(l, tenv)
      | intT():
          match typecheck(r, tenv)
          | intT(): intT()
          | ~else: error(#'parse, "not a number")
      | ~else: error(#'parse, "not a number")
  | plusE(l, r):
      match typecheck(l, tenv)
      | intT():
          match typecheck(r, tenv)
          | intT(): intT()
          | ~else:  error(#'parse, "not a number")
      | ~else:  error(#'parse, "not a number")
  | idE(name): type_lookup(name, tenv)
  | funE(n, arg_type, body):
      arrowT(arg_type,
             typecheck(body, extend_env(tbind(n, arg_type),
                                        tenv)))
  | appE(fn, arg):
      match typecheck(fn, tenv)
      | arrowT(arg_type, result_type):
          if arg_type == typecheck(arg, tenv)
          | result_type
          | type_error(arg,
                       to_string(arg_type))
      | ~else: type_error(fn, "function")

module test:
  fun run(s :: Syntax) :: Type:
    typecheck(parse(s), [])
  check: run('(fun (x :: Int): x)(2)')
         ~is intT()
  check: run('(fun (x :: Boolean): x)(6)')
         ~raises "no type"
  check: run('0')
         ~is intT()
  check: run('2(2)')
         ~raises "not a function"
  check: run('fun test(arg :: faketype): arg')
         ~raises "invalid input"
  check: run('(fun test(arg :: Int): arg)(3)')
         ~raises "invalid input"
  check: run('2 * 2')
         ~is intT()
  check: run('1 + 1')
         ~is intT()
  check: run('1 + (fun (x :: Int): x)')
         ~raises "not a number"
  check: run('(fun (x :: Int): x) + 1')
         ~raises "not a number"
  check: run('1 * (fun (x :: Int): x)')
         ~raises "not a number"
  check: run('(fun (x :: Int): x) * 1')
         ~raises "not a number"
fun type_lookup(n :: Symbol, tenv :: TypeEnv):: Type:
  match tenv
  | []: error(#'lookup, "free variable")
  | cons(b, rst_env):
      cond
      | n == tbind.name(b):
          tbind.t(b)
      | ~else:
          type_lookup(n, rst_env)
check: type_lookup(#'symbol, [])
       ~raises "free variable"
check: type_lookup(#'symbol, [tbind(#'lsdkj, intT())])
       ~raises "free variable"
fun parse_type(s :: Syntax) :: Type:
  match s
  | 'Int': intT()
  | 'Boolean': boolT()
  | '$arg1 -> $arg2 -> $result':
      // make `->` right-associative
      parse_type('$arg1 -> ($arg2 -> $result)')
  | '$arg -> $result':
      arrowT(parse_type(arg), parse_type(result))
  | '($ty)': parse_type(ty)
  | ~else: error(#'parse_type, "invalid input: " +& s)

check: parse_type('Boolean')
       ~is boolT()
check: parse_type('Int -> Int -> Int')
       ~is arrowT(intT(), arrowT(intT(), intT()))
check: parse_type('sfdfdsfsdfds')
       ~raises "invalid input"
// parse ----------------------------------------
fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | '$left + $right':
          plusE(parse(left),
                parse(right))
      | '$left * $right':
          multE(parse(left),
                parse(right))
      | 'fun ($id :: $t): $body':
          funE(syntax_to_symbol(id),
               parse_type(t),
               parse(body))
      | '$fn($arg)':
          appE(parse(fn),
               parse(arg))
      | '($e)':
          parse(e)
      | ~else:
          error(#'parse, "invalid input: " +& s)

// interp ----------------------------------------
fun interp(a :: Exp, env :: Env) :: Value:
  match a
  | intE(n): intV(n)
  | idE(s): lookup(s, env)
  | plusE(l, r): num_plus(interp(l, env), interp(r, env))
  | multE(l, r): num_mult(interp(l, env), interp(r, env))
  | funE(n, typeArg, body): closV(n, body, env)
  | appE(fn, arg):
      match interp(fn, env)
      | closV(n, body, c_env):
          interp(body,
                 extend_env(bind(n, interp(arg, env)),
                            c_env))
      | ~else: error(#'interp, "not a function")

               
// num_plus and num_mult ----------------------------------------
fun num_op(op :: (Int, Int) -> Int, l :: Value, r :: Value) :: Value:
  cond
  | l is_a intV && r is_a intV:
      intV(op(intV.n(l), intV.n(r)))
  | ~else:
      error(#'interp, "not a number")
fun num_plus(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a+b, l, r)
fun num_mult(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a*b, l, r)

  
// lookup ----------------------------------------
fun lookup(n :: Symbol, env :: Env) :: Value:
  match env
  | []: error(#'lookup, "free variable")
  | cons(b, rst_env):
      cond
      | n == bind.name(b):
          bind.val(b)
      | ~else:
          lookup(n, rst_env)

module test:
  check: lookup(#'x, mt_env)
         ~raises "free variable"
  check: lookup(#'x, extend_env(bind(#'x, intV(8)), mt_env))
         ~is intV(8)
  check: lookup(#'x, extend_env(bind(#'x, intV(9)),
                                extend_env(bind(#'x, intV(8)),
                                           mt_env)))
         ~is intV(9)
  check: lookup(#'y, extend_env(bind(#'x, intV(9)),
                                extend_env(bind(#'y, intV(8)),
                                           mt_env)))
         ~is intV(8)
  check: num_plus(intV(1), intV(2))
         ~is intV(3)
  check: num_mult(intV(3), intV(2))
         ~is intV(6)
  check: interp(parse('2'), mt_env)
         ~is intV(2)
  check: interp(parse('x'), mt_env)
         ~raises "free variable"
  check: interp(parse('x'),
                extend_env(bind(#'x, intV(9)), mt_env))
         ~is intV(9)
  check: interp(parse('2 + 1'), mt_env)
         ~is intV(3)
  check: interp(parse('2 * 1'), mt_env)
         ~is intV(2)
  check: interp(parse('(2 * 3) + (5 + 8)'), mt_env)
         ~is intV(19)
  check: interp(parse('fun (x :: Int): x + x'),
                mt_env)
         ~is closV(#'x, plusE(idE(#'x), idE(#'x)), mt_env)
  check: interp(parse('(fun (x :: Int): x + x)(8)'),
                mt_env)
         ~is intV(16)
  check: interp(parse('1(2)'), mt_env)
         ~raises "not a function"
  check: interp(parse('1 + (fun (x :: Int): x)'), mt_env)
         ~raises "not a number"

  check: parse('2')
         ~is intE(2)
  check: parse('x')
         ~is idE(#'x)
  check: parse('2 + 1')
         ~is plusE(intE(2), intE (1))
  check: parse('3 * 4')
         ~is multE(intE(3), intE(4))
  check: parse('3 * 4 + 8')
         ~is plusE(multE(intE(3), intE(4)),
                   intE(8))
  check: parse('fun (x :: Int): 9')
         ~is funE(#'x, intT(), intE(9))
  check: parse('double(9)')
         ~is appE(idE(#'double), intE(9))
  check: parse('1 + double(9)')
         ~is plusE(intE(1),
                   appE(idE(#'double), intE(9)))
  check: parse('3 * (4 + 8)')
         ~is multE(intE(3),
                   plusE(intE(4), intE(8)))
  check: parse('1 2')
         ~raises "invalid input"
      
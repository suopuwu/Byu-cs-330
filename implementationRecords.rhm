#lang shplait

type Value
| intV(n :: Int)
| closV(arg :: Symbol,
        body :: Exp,
        env :: Env)
| recV(ns :: Listof(Symbol),
       vs :: Listof(Value))

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp,
        r :: Exp)
| multE(l :: Exp,
        r :: Exp)
| letE(n :: Symbol,
       rhs :: Exp,
       body :: Exp)
| funE(n :: Symbol,
       body :: Exp)
| appE(fn :: Exp,
       arg :: Exp)
| recordE(ns :: Listof(Symbol),
          args :: Listof(Exp))
| getE(rec :: Exp,
       n :: Symbol)
| setE(rec :: Exp,
       n :: Symbol,
       val :: Exp)

type Binding
| bind(name :: Symbol,
       val :: Value)

type Env = Listof(Binding)

def mt_env = []
def extend_env = cons

// parse ----------------------------------------
fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | '$exp with ($name = $field_exp)':
          setE(parse(exp), syntax_to_symbol(name), parse(field_exp))
      | 'let $name = $rhs:
           $body':
          letE(syntax_to_symbol(name),
               parse(rhs),
               parse(body))
      | '$left + $right':
          plusE(parse(left),
                parse(right))
      | '$left * $right':
          multE(parse(left),
                parse(right))
      | 'fun ($id): $body':
          funE(syntax_to_symbol(id),
               parse(body))
      | '$fn($arg)':
          appE(parse(fn),
               parse(arg))
      | '{ $field: $expr, ... }':
          recordE(map(syntax_to_symbol,
                      syntax_to_list('[$field, ...]')),
                  map(parse,
                      syntax_to_list('[$expr, ...]')))
      | '$exp . $name':
          getE(parse(exp), syntax_to_symbol(name))
      | '($e)':
          parse(e)
      | ~else:
          error(#'parse, "invalid input: " +& s)

// interp ----------------------------------------
fun interp(a :: Exp, env :: Env) :: Value:
  match a
  | intE(n): intV(n)
  | idE(s): lookup(s, env)
  | plusE(l, r): num_plus(interp(l, env), interp(r, env))
  | multE(l, r): num_mult(interp(l, env), interp(r, env))
  | letE(n, rhs, body):
      def rhs_v = interp(rhs, env)
      interp(body,
             extend_env(bind(n, rhs_v),
                        env))
  | funE(n, body): closV(n, body, env)
  | appE(fn, arg):
      match interp(fn, env)
      | closV(n, body, c_env):
          interp(body,
                 extend_env(bind(n, interp(arg, env)),
                            c_env))
      | ~else: error(#'interp, "not a function")
  | recordE(ns, vs):
      recV(ns,
           map(fun (a): interp(a, env),
               vs))
  | getE(r, n):
      match interp(r, env)
      | recV(ns, vs):
          find(n, ns, vs)
      | ~else: error(#'interp, "not a record")
  | setE(r, n, v):
      match interp(r, env)
      | recV(ns, vs):
          recV(ns,
               update(n,
                      interp(v, env),
                      ns,
                      vs))
      | ~else: error(#'interp, "not a record")


//todo
fun find(searchKey :: Symbol, keys :: Listof(Symbol), vals :: Listof(Value)) :: Value:
  match keys
  | []: error(#'find, "no such field")
  | cons(key, remainingKeys):
      if searchKey == key
      | first(vals)
      | find(searchKey, remainingKeys, rest(vals))
        
fun update(n :: Symbol,
           v :: Value,
           ns :: Listof(Symbol),
           vs :: Listof(Value)) :: Listof(Value):
  match ns
  | []: error(#'interp, "no such field: " +& n)
  | cons(ns_n, ns_rst): if n == ns_n
                        | cons(v, rest(vs))
                        | cons(first(vs), update(n, v, ns_rst, rest(vs)))

// num_plus and num_mult ----------------------------------------
fun num_op(op :: (Int, Int) -> Int, l :: Value, r :: Value) :: Value:
  cond
  | l is_a intV && r is_a intV:
      intV(op(intV.n(l), intV.n(r)))
  | ~else:
      error(#'interp, "not a number")
fun num_plus(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a+b, l, r)
fun num_mult(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a*b, l, r)

  
// lookup ----------------------------------------
fun lookup(n :: Symbol, env :: Env) :: Value:
  match env
  | []: error(#'lookup, "free variable")
  | cons(b, rst_env):
      cond
      | n == bind.name(b):
          bind.val(b)
      | ~else:
          lookup(n, rst_env)

module test:
  fun run(s :: Syntax):
    def val = interp(parse(s), mt_env)
    match val
    | intV(n): n
    | ~else: error(#'test, "run cannot be used with anything but intV")

  check: run('let test = {
                first: 3,
                second: 39}:
                test')
         ~raises "run cannot be used with anything but intV"
  check: run('let test = {
                first: 3,
                second: 39}:
                test.first')
         ~is 3
  check: run('let test = {
                first: 3,
                second: 39}:
                test.second')
         ~is 39
  check: run('let test = {
                first: 3,
                second: 39}:
                test.nonexistent')
         ~raises "no such field"
  check: run('let test = {
                first: 3,
                second: 39}:
                let secondTest = test with (first = 24):
                  secondTest.first
              ')
         ~is 24
  check: run('let test = {
                first: 3,
                second: 39}:
                let secondTest = test with (nonexistent = 24):
                  secondTest.first
              ')
         ~raises "no such field"
  check: run('let test = 2:
                let secondTest = test with (nonexistent = 24):
                  1
              ')
         ~raises "not a record"
  check: run('let test = 3:
                test.second')
         ~raises "not a record"
  check: lookup(#'x, mt_env)
         ~raises "free variable"
  check: lookup(#'x, extend_env(bind(#'x, intV(8)), mt_env))
         ~is intV(8)
  check: lookup(#'x, extend_env(bind(#'x, intV(9)),
                                extend_env(bind(#'x, intV(8)),
                                           mt_env)))
         ~is intV(9)
  check: lookup(#'y, extend_env(bind(#'x, intV(9)),
                                extend_env(bind(#'y, intV(8)),
                                           mt_env)))
         ~is intV(8)
  check: num_plus(intV(1), intV(2))
         ~is intV(3)
  check: num_mult(intV(3), intV(2))
         ~is intV(6)
  check: interp(parse('2'), mt_env)
         ~is intV(2)
  check: interp(parse('x'), mt_env)
         ~raises "free variable"
  check: interp(parse('x'),
                extend_env(bind(#'x, intV(9)), mt_env))
         ~is intV(9)
  check: interp(parse('2 + 1'), mt_env)
         ~is intV(3)
  check: interp(parse('2 * 1'), mt_env)
         ~is intV(2)
  check: interp(parse('(2 * 3) + (5 + 8)'), mt_env)
         ~is intV(19)
  check: interp(parse('fun (x): x + x'),
                mt_env)
         ~is closV(#'x, plusE(idE(#'x), idE(#'x)), mt_env)
  check: interp(parse('let x = 5: x + x'),
                mt_env)
         ~is intV(10)
  check: interp(parse('let x = 5:
                         let x = x + 1:
                           x + x'),
                mt_env)
         ~is intV(12)
  check: interp(parse('let x = 5:
                         let y = 6:
                           x'),
                mt_env)
         ~is intV(5)
  check: interp(parse('(fun (x): x + x)(8)'),
                mt_env)
         ~is intV(16)
  check: interp(parse('1(2)'), mt_env)
         ~raises "not a function"
  check: interp(parse('1 + (fun (x): x)'), mt_env)
         ~raises "not a number"
  check: interp(parse('let bad = (fun (x): x + y):
                         let y = 5:
                           bad(2)'),
                mt_env)
         ~raises "free variable"
  check: parse('2')
         ~is intE(2)
  check: parse('x')
         ~is idE(#'x)
  check: parse('2 + 1')
         ~is plusE(intE(2), intE (1))
  check: parse('3 * 4')
         ~is multE(intE(3), intE(4))
  check: parse('3 * 4 + 8')
         ~is plusE(multE(intE(3), intE(4)),
                   intE(8))
  check: parse('fun (x): 9')
         ~is funE(#'x, intE(9))
  check: parse('double(9)')
         ~is appE(idE(#'double), intE(9))
  check: parse('1 + double(9)')
         ~is plusE(intE(1),
                   appE(idE(#'double), intE(9)))
  check: parse('3 * (4 + 8)')
         ~is multE(intE(3),
                   plusE(intE(4), intE(8)))
  check: parse('let x = 1 + 2:
                  y')
         ~is letE(#'x,
                  plusE(intE(1), intE(2)),
                  idE(#'y))
  check: parse('1 2')
         ~raises "invalid input"
  macro 'test_returns $fn:
           ($arg, ...): $ret
           ...':
              'block:
                 check: $fn($arg, ...)
                        ~is $ret
                 ...'
  test_returns update:
    (#'a, intV(0), [#'a, #'b], [intV(1), intV(2)]): [intV(0), intV(2)]
    (#'b, intV(0), [#'a, #'b], [intV(1), intV(2)]): [intV(1), intV(0)]